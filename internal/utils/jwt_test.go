package utils

import (
	"os"
	"testing"
	"time"

	"rim-router-service-ver-cgo/internal/config"
	"rim-router-service-ver-cgo/internal/models"

	"github.com/golang-jwt/jwt"
)

func TestGenerateAndValidateAccessToken(t *testing.T) {
	// üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –∑–∞–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
	os.Setenv("JWT_SECRET", "testsecretkey")

	user := &models.User{
		ID:       42,
		Username: "tester",
		Role:     1,
	}

	tokenString, err := GenerateAccessToken(user)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: %v", err)
	}

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
	if tokenString == "" {
		t.Fatal("–û–∂–∏–¥–∞–ª—Å—è –Ω–µ–ø—É—Å—Ç–æ–π JWT —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É")
	}

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
	claims, err := ValidateToken(tokenString)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: %v", err)
	}

	// üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
	if claims.UserID != user.ID {
		t.Errorf("UserID mismatch: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–∏–ª–∏ %d", user.ID, claims.UserID)
	}
	if claims.Username != user.Username {
		t.Errorf("Username mismatch: –æ–∂–∏–¥–∞–ª–æ—Å—å %s, –ø–æ–ª—É—á–∏–ª–∏ %s", user.Username, claims.Username)
	}
	if claims.Role != user.Role {
		t.Errorf("Role mismatch: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–∏–ª–∏ %d", user.Role, claims.Role)
	}

	// üïì –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
	jwtCfg := config.GetJWTConfig()
	expectedExp := time.Now().Add(jwtCfg.AccessExpiration)
	actualExp := time.Unix(claims.ExpiresAt, 0)

	if actualExp.Sub(expectedExp) > time.Minute {
		t.Errorf("–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º: %v vs %v", actualExp, expectedExp)
	}
}

func TestValidateToken_InvalidSignature(t *testing.T) {
	os.Setenv("JWT_SECRET", "real-secret")

	claims := &Claims{
		UserID:   1,
		Username: "baduser",
		Role:     0,
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: time.Now().Add(5 * time.Minute).Unix(),
			IssuedAt:  time.Now().Unix(),
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	tokenString, _ := token.SignedString([]byte("wrong-secret"))

	_, err := ValidateToken(tokenString)
	if err == nil {
		t.Error("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞, –Ω–æ –µ—ë –Ω–µ –≤–æ–∑–Ω–∏–∫–ª–æ")
	}
}

func TestValidateToken_Expired(t *testing.T) {
	os.Setenv("JWT_SECRET", "exp-secret")

	expiredClaims := &Claims{
		UserID:   5,
		Username: "expireduser",
		Role:     0,
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: time.Now().Add(-time.Minute).Unix(),
			IssuedAt:  time.Now().Add(-2 * time.Minute).Unix(),
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, expiredClaims)
	tokenString, _ := token.SignedString([]byte("exp-secret"))

	_, err := ValidateToken(tokenString)
	if err == nil {
		t.Error("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Ç—ë–∫—à–µ–º —Ç–æ–∫–µ–Ω–µ, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞")
	}
}

func TestGenerateSecureToken(t *testing.T) {
	tok1, err1 := GenerateSecureToken()
	tok2, err2 := GenerateSecureToken()

	if err1 != nil || err2 != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ secure —Ç–æ–∫–µ–Ω–∞: %v, %v", err1, err2)
	}

	if len(tok1) != 64 {
		t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –¥–ª–∏–Ω–∞ 64, –ø–æ–ª—É—á–∏–ª–∏ %d", len(tok1))
	}
	if tok1 == tok2 {
		t.Error("–û–∂–∏–¥–∞–ª–æ—Å—å, —á—Ç–æ –¥–≤–∞ secure —Ç–æ–∫–µ–Ω–∞ –±—É–¥—É—Ç —Ä–∞–∑–ª–∏—á–Ω—ã, –Ω–æ –æ–Ω–∏ —Å–æ–≤–ø–∞–ª–∏")
	}
}
